{"version":3,"sources":["StartButton.jsx","Select.jsx","App.js","index.js"],"names":["StartButton","handler","className","type","onClick","options","Array","fill","map","el","i","Select","onChange","event","option","key","goodsFromServer","App","state","goods","isStartPressed","isListShown","showListHandler","setState","reverseHandler","reverse","resetHandler","sort","sortByNameHandler","prevGood","currentGood","localeCompare","sortByLengthHandler","length","changeHandler","wordLength","target","value","filter","good","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6NAGaA,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACzB,4BACEC,UAAU,uBACVC,KAAK,SACLC,QAASH,GAHX,WCDII,EAAU,IAAIC,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAIC,GAAL,OAAWA,EAAI,KAE5CC,EAAS,SAAC,GAAD,IAAGV,EAAH,EAAGA,QAAH,OACpB,4BACEC,UAAU,SACVU,SAAU,SAAAC,GAAK,OAAIZ,EAAQY,KAE1BR,EAAQG,KAAI,SAAAM,GAAM,OACjB,4BAAQC,IAAKD,GAASA,QCNtBE,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA6GaC,E,4MAzGbC,MAAQ,CACNC,MAAOH,EACPI,gBAAgB,EAChBC,aAAa,G,EAGfC,gBAAkB,WAChB,EAAKC,UAAS,SAAAL,GAAK,MAAK,CACtBE,gBAAiBF,EAAME,eACvBC,aAAcH,EAAMG,iB,EAIxBG,eAAgB,WACd,EAAKD,SAAS,CAAEJ,MAAO,UAAIH,GAAiBS,a,EAG9CC,aAAc,WACZ,EAAKH,SAAS,CAAEJ,MAAO,UAAIH,GAAiBW,MAAK,kBAAM,Q,EAGzDC,kBAAoB,WAClB,EAAKL,SAAS,CACZJ,MAAO,UAAIH,GAAiBW,MAAK,SAACE,EAAUC,GAAX,OAC/BD,EAASE,cAAcD,S,EAI7BE,oBAAsB,WACpB,EAAKT,SAAS,CACZJ,MAAO,UAAIH,GAAiBW,MAAK,SAACE,EAAUC,GAAX,OAC/BD,EAASI,OAASH,EAAYG,a,EAIpCC,cAAgB,SAACrB,GACf,IAAMsB,EAAatB,EAAMuB,OAAOC,MAEhC,EAAKd,SAAS,CACZJ,MAAO,UAAIH,GAAiBsB,QAAO,SAAAC,GAAI,OAAIA,EAAKN,QAAUE,Q,4CAI9D,WAAU,IAAD,SAKHK,KAAKtB,MAHPC,EAFK,EAELA,MACAC,EAHK,EAGLA,eACAC,EAJK,EAILA,YAGF,OACE,yBAAKnB,UAAU,OACb,wBAAIA,UAAU,iBAAd,UACEkB,GACA,kBAAC,EAAD,CAAanB,QAASuC,KAAKlB,kBAE5BD,GACC,6BACE,wBAAInB,UAAU,eACXiB,EAAMX,KAAI,SAAA+B,GAAI,OACb,wBAAIxB,IAAKwB,EAAMrC,UAAU,eACtBqC,OAIP,yBAAKrC,UAAU,kBACb,4BACEA,UAAU,SACVC,KAAK,SACLC,QAASoC,KAAKhB,gBAHhB,WAOA,4BACEtB,UAAU,SACVC,KAAK,SACLC,QAASoC,KAAKZ,mBAHhB,uBAOA,4BACE1B,UAAU,SACVC,KAAK,SACLC,QAASoC,KAAKd,cAHhB,SAOA,4BACExB,UAAU,SACVC,KAAK,SACLC,QAASoC,KAAKR,qBAHhB,kBAOA,kBAAC,EAAD,CAAQ/B,QAAS,SAAAY,GAAK,OAAI,EAAKqB,cAAcrB,a,GA/FzC4B,IAAMC,WCdxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.b3c2ac95.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const StartButton = ({ handler }) => (\n  <button\n    className=\"button button--start\"\n    type=\"button\"\n    onClick={handler}\n  >\n    Start\n  </button>\n);\n\nStartButton.propTypes = {\n  handler: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst options = new Array(10).fill(1).map((el, i) => i + 1);\n\nexport const Select = ({ handler }) => (\n  <select\n    className=\"button\"\n    onChange={event => handler(event)}\n  >\n    {options.map(option => (\n      <option key={option}>{option}</option>\n    ))}\n\n  </select>\n);\n\nSelect.propTypes = {\n  handler: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.css';\nimport { StartButton } from './StartButton';\nimport { Select } from './Select';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nclass App extends React.Component {\n  state = {\n    goods: goodsFromServer,\n    isStartPressed: false,\n    isListShown: false,\n  };\n\n  showListHandler = () => {\n    this.setState(state => ({\n      isStartPressed: !state.isStartPressed,\n      isListShown: !state.isListShown,\n    }));\n  }\n\n  reverseHandler =() => {\n    this.setState({ goods: [...goodsFromServer].reverse() });\n  }\n\n  resetHandler =() => {\n    this.setState({ goods: [...goodsFromServer].sort(() => 0) });\n  }\n\n  sortByNameHandler = () => {\n    this.setState({\n      goods: [...goodsFromServer].sort((prevGood, currentGood) => (\n        prevGood.localeCompare(currentGood))),\n    });\n  }\n\n  sortByLengthHandler = () => {\n    this.setState({\n      goods: [...goodsFromServer].sort((prevGood, currentGood) => (\n        prevGood.length - currentGood.length)),\n    });\n  }\n\n  changeHandler = (event) => {\n    const wordLength = event.target.value;\n\n    this.setState({\n      goods: [...goodsFromServer].filter(good => good.length >= wordLength),\n    });\n  }\n\n  render() {\n    const {\n      goods,\n      isStartPressed,\n      isListShown,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"goods__header\">Goods</h1>\n        {!isStartPressed && (\n          <StartButton handler={this.showListHandler} />\n        )}\n        {isListShown && (\n          <div>\n            <ul className=\"goods__list\">\n              {goods.map(good => (\n                <li key={good} className=\"goods__item\">\n                  {good}\n                </li>\n              ))}\n            </ul>\n            <div className=\"goods__buttons\">\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.reverseHandler}\n              >\n                Reverse\n              </button>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.sortByNameHandler}\n              >\n                Sort alphabetically\n              </button>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.resetHandler}\n              >\n                Reset\n              </button>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={this.sortByLengthHandler}\n              >\n                Sort by length\n              </button>\n              <Select handler={event => this.changeHandler(event)} />\n\n            </div>\n          </div>\n        )}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}